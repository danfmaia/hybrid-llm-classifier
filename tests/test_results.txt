============================= test session starts ==============================
platform linux -- Python 3.10.16, pytest-8.3.4, pluggy-1.5.0 -- /home/danfmaia/miniconda3/envs/hybrid-llm-classifier/bin/python3.10
cachedir: .pytest_cache
rootdir: /home/danfmaia/_repos/hybrid-llm-classifier
configfile: pyproject.toml
plugins: anyio-3.6.2, asyncio-0.25.3, cov-6.0.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None
collecting ... collected 6 items

tests/test_auth_middleware.py::test_auth_no_token PASSED                 [ 16%]
tests/test_auth_middleware.py::test_auth_invalid_token PASSED            [ 33%]
tests/test_auth_middleware.py::test_auth_token_generation PASSED         [ 50%]
tests/test_auth_middleware.py::test_rate_limiting FAILED                 [ 66%]
tests/test_auth_middleware.py::test_protected_endpoint_with_valid_token FAILED [ 83%]
tests/test_auth_middleware.py::test_batch_request_with_rate_limit FAILED [100%]

=================================== FAILURES ===================================
______________________________ test_rate_limiting ______________________________

test_client = <starlette.testclient.TestClient object at 0x7b462eff35e0>
test_settings = Settings(api_title='Legal Document Classifier', api_description='Zero-shot legal document classification using Mistral...el_name='mistral', embedding_dim=384, similarity_threshold=0.75, rate_limit_requests=100, rate_limit_window_seconds=60)

    def test_rate_limiting(test_client: TestClient, test_settings: Any) -> None:
        """Test that rate limiting middleware works."""
        # Get a valid token first
        auth_response = test_client.post(
            "/api/v1/auth/token",
            data={"username": "testuser", "password": "testpass"}
        )
        token = auth_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
    
        # Make requests up to the limit
        for _ in range(test_settings.rate_limit_requests):
            response = test_client.get("/health", headers=headers)
>           assert response.status_code == 200
E           assert 429 == 200
E            +  where 429 = <Response [429 Too Many Requests]>.status_code

tests/test_auth_middleware.py:53: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-02-06 19:49:59,724 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 200 OK"
2025-02-06 19:49:59,726 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,728 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,729 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,731 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,733 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,734 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,736 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,738 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,740 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,741 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,743 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,746 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,748 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,750 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,752 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,754 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,756 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,758 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,760 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,762 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,763 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,765 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,766 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,768 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,769 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,771 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,773 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,774 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,775 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,777 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,780 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,782 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,784 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,785 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,787 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,789 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,791 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,792 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,794 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,796 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,798 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,800 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,802 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,803 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,805 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,807 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,809 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,810 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,812 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,814 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,816 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,818 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,820 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,822 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,824 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,825 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,827 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,829 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,831 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,833 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,835 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,836 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,838 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,840 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,841 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,843 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,845 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,847 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,849 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,851 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,853 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,854 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,856 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,858 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,860 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,862 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,864 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,866 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,868 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,870 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,872 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,874 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,875 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,877 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,879 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,881 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,883 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,884 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,886 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,887 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,889 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,891 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,893 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,895 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,896 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,898 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
2025-02-06 19:49:59,899 - httpx - INFO - HTTP Request: GET http://testserver/health "HTTP/1.1 429 Too Many Requests"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1025 HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 200 OK"
INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/health "HTTP/1.1 429 Too Many Requests"
___________________ test_protected_endpoint_with_valid_token ___________________

test_client = <starlette.testclient.TestClient object at 0x7b462eff35e0>

    def test_protected_endpoint_with_valid_token(test_client: TestClient) -> None:
        """Test accessing protected endpoint with valid token."""
        # Get a valid token
        auth_response = test_client.post(
            "/api/v1/auth/token",
            data={"username": "testuser", "password": "testpass"}
        )
>       token = auth_response.json()["access_token"]
E       KeyError: 'access_token'

tests/test_auth_middleware.py:69: KeyError
----------------------------- Captured stderr call -----------------------------
2025-02-06 19:49:59,944 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 429 Too Many Requests"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1025 HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 429 Too Many Requests"
______________________ test_batch_request_with_rate_limit ______________________

test_client = <starlette.testclient.TestClient object at 0x7b462eff35e0>

    def test_batch_request_with_rate_limit(test_client: TestClient) -> None:
        """Test batch requests respect rate limiting."""
        # Get a valid token
        auth_response = test_client.post(
            "/api/v1/auth/token",
            data={"username": "testuser", "password": "testpass"}
        )
>       token = auth_response.json()["access_token"]
E       KeyError: 'access_token'

tests/test_auth_middleware.py:89: KeyError
----------------------------- Captured stderr call -----------------------------
2025-02-06 19:49:59,948 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 429 Too Many Requests"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1025 HTTP Request: POST http://testserver/api/v1/auth/token "HTTP/1.1 429 Too Many Requests"
=============================== warnings summary ===============================
../../miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/faiss/loader.py:28
  /home/danfmaia/miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/faiss/loader.py:28: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(numpy.__version__) >= "1.19":

../../miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/setuptools/_distutils/version.py:336
  /home/danfmaia/miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/setuptools/_distutils/version.py:336: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

../../miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/pydantic/_internal/_config.py:295
  /home/danfmaia/miniconda3/envs/hybrid-llm-classifier/lib/python3.10/site-packages/pydantic/_internal/_config.py:295: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_auth_middleware.py::test_rate_limiting - assert 429 == 200
FAILED tests/test_auth_middleware.py::test_protected_endpoint_with_valid_token
FAILED tests/test_auth_middleware.py::test_batch_request_with_rate_limit - Ke...
=================== 3 failed, 3 passed, 3 warnings in 0.26s ====================
